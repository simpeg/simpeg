parameters:
  os : ['ubuntu-latest']
  py_vers: ['3.8']
  test: ['tests/em',
         'tests/base tests/flow tests/seis tests/utils tests/meta',
         'tests/docs -s -v',
         'tests/examples/test_examples_1.py',
         'tests/examples/test_examples_2.py',
         'tests/examples/test_examples_3.py',
         'tests/examples/test_tutorials_1.py tests/examples/test_tutorials_2.py',
         'tests/examples/test_tutorials_3.py',
         'tests/pf',
         'tests/dask', # This must be ran on it's own to avoid modifying the code from any other tests.
         ]

jobs:
  - ${{ each os in parameters.os }}:
    - ${{ each py_vers in parameters.py_vers }}:
      - ${{ each test in parameters.test }}:
        - job:
          displayName: ${{ os }}_${{ py_vers }}_${{ test }}
          pool:
            vmImage: ${{ os }}
          timeoutInMinutes: 120
          steps:
          - script: |
              wget -O Mambaforge.sh  "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
              bash Mambaforge.sh -b -p "${HOME}/conda"
            displayName: Install mamba

          - script: |
              source "${HOME}/conda/etc/profile.d/conda.sh"
              source "${HOME}/conda/etc/profile.d/mamba.sh"
              echo "  - python="${{ py_vers }} >> environment_test.yml
              mamba env create -f environment_test.yml
              conda activate simpeg-test
              pip install pytest-azurepipelines
            displayName: Create Anaconda testing environment

          - script: |
              source "${HOME}/conda/etc/profile.d/conda.sh"
              conda activate simpeg-test
              pip install -e .
            displayName: Build package

          - script: |
              source "${HOME}/conda/etc/profile.d/conda.sh"
              conda activate simpeg-test
              export KMP_WARNINGS=0
              pytest ${{ test }} -v --cov-config=.coveragerc --cov=SimPEG --cov-report=xml --cov-report=html -W ignore::DeprecationWarning
            displayName: 'Testing ${{ test }}'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(Build.SourcesDirectory)/docs/_build/html
              artifactName: html_docs
            displayName: 'Publish documentation artifact'
            condition: eq('${{ test }}', 'tests/docs -s -v')

          - script: |
              curl -Os https://uploader.codecov.io/latest/linux/codecov
              chmod +x codecov
              ./codecov --sha $(system.pullRequest.sourceCommitId)
            displayName: 'Upload PR coverage to codecov.io'
            condition: and(eq(${{ py_vers }}, '3.8'), startsWith(variables['build.sourceBranch'], 'refs/pull/'))

          - script: |
              curl -Os https://uploader.codecov.io/latest/linux/codecov
              chmod +x codecov
              ./codecov
            displayName: 'Upload coverage to codecov.io'
            condition: and(eq(${{ py_vers }}, '3.8'), not(startsWith(variables['build.sourceBranch'], 'refs/pull/')))
