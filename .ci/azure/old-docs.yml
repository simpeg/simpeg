jobs:
  - job:
    displayName: Deploy Docs and source
    pool:
      vmImage: ubuntu-latest
    variables:
      python.version: '3.8'
    timeoutInMinutes: 240
    steps:

      # Checkout simpeg repo.
      # Sync tags and disable shallow depth to get the SimPEG version.
      - checkout: self
        fetchDepth: 0
        fetchTags: true
        displayName: Checkout repository (including tags)

      - script: |
          git config --global user.name ${GH_NAME}
          git config --global user.email ${GH_EMAIL}
          git config --list | grep user.
        displayName: 'Configure git'
        env:
          GH_NAME: $(gh.name)
          GH_EMAIL: $(gh.email)

      - script: |
          wget -O Mambaforge.sh  "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
          bash Mambaforge.sh -b -p "${HOME}/conda"
        displayName: Install mamba

      - script: |
          source "${HOME}/conda/etc/profile.d/conda.sh"
          source "${HOME}/conda/etc/profile.d/mamba.sh"
          cp environment_test.yml environment_test_with_pyversion.yml
          echo "  - python="$(python.version) >> environment_test_with_pyversion.yml
          mamba env create -f environment_test_with_pyversion.yml
          rm environment_test_with_pyversion.yml
          conda activate simpeg-test
          pip install pytest-azurepipelines
          echo "\nList installed packages"
          conda list
        displayName: Create Anaconda testing environment

      - script: |
          source "${HOME}/conda/etc/profile.d/conda.sh"
          conda activate simpeg-test
          pip install -e .
        displayName: Build package

      - script: |
          source "${HOME}/conda/etc/profile.d/conda.sh"
          conda activate simpeg-test
          python -c "import simpeg; print(simpeg.__version__)"
        displayName: Check SimPEG version

      # DON'T PUSH TO PYPI HERE (we have another stage for that)
      # - script: |
      #     source "${HOME}/conda/etc/profile.d/conda.sh"
      #     conda activate simpeg-test
      #     python setup.py sdist
      #     twine upload --skip-existing dist/*
      #   displayName: Deploy source
      #   env:
      #     TWINE_USERNAME: $(twine.username)
      #     TWINE_PASSWORD: $(twine.password)

      - script: |
          source "${HOME}/conda/etc/profile.d/conda.sh"
          conda activate simpeg-test
          export KMP_WARNINGS=0
          cd docs
          make html
          cd ..
        displayName: Building documentation

      # upload documentation to simpeg-docs gh-pages on tags
      - script: |
          git clone --depth 1 https://${GH_TOKEN}@github.com/simpeg/simpeg-docs.git
          cd simpeg-docs
          git gc --prune=now
          git remote prune origin
          rm -rf *
          cp -r $BUILD_SOURCESDIRECTORY/docs/_build/html/* .
          cp $BUILD_SOURCESDIRECTORY/docs/README.md .
          touch .nojekyll
          echo "docs.simpeg.xyz" >> CNAME
          git add .
          git commit -am "Azure CI commit ref $(Build.SourceVersion)"
          git push
        displayName: Push documentation to simpeg-docs
        env:
          GH_TOKEN: $(gh.token)
