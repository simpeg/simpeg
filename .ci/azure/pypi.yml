variables:
  python_version: "3.9"

jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
      # Checkout simpeg repo.
      # Sync tags and disable shallow depth to get the SimPEG version.
      - checkout: self
        fetchDepth: 0
        fetchTags: true
        displayName: "Checkout repository (including tags)"

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python_version)
        displayName: "Setup Python"

      - bash: |
          pip install setuptools>=61 setuptools_scm wheel twine
        displayName: "Install build dependencies"

      - bash: |
          # Change setuptools-scm local_scheme to "no-local-version" so the
          # local part of the version isn't included, making the version string
          # compatible with Test PyPI. Only do this when building for TestPyPI.
          sed --in-place 's/node-and-date/no-local-version/g' setup.py
        condition: startsWith(variables['build.sourceBranch'], 'refs/heads/main')
        displayName: "Configure local_scheme (only for TestPyPI)"

      - bash: |
          python setup.py sdist
        displayName: "Create source distribution for simpeg"

      - bash: |
          twine check dist/*
        displayName: "Check the source distribution"

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Build.SourcesDirectory)/dist
          artifactName: pypi-dist
        displayName: 'Upload dist as artifact'

  - job: Deploy
    dependsOn: Build
    condition: or(startsWith(variables['build.sourceBranch'], 'refs/tags/'), eq(variables['build.sourceBranch'], 'refs/heads/main'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: pypi-dist
          targetPath: dist
        displayName: 'Download dist artifact'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python_version)
        displayName: "Setup Python"

      - bash: |
          pip install twine
        displayName: "Install twine"

      # Push to TestPyPI (only on push to main)
      - bash: |
          twine upload --repository testpypi dist/*
        displayName: "Upload to TestPyPI"
        condition: eq(variables['build.sourceBranch'], 'refs/heads/main')
        env:
          TWINE_USERNAME: $(twine.username)
          TWINE_PASSWORD: $(test.twine.password)

      # Push to PyPI (only on release)
      - bash: |
          twine upload --skip-existing dist/*
        displayName: "Upload to PyPI"
        condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
        env:
          TWINE_USERNAME: $(twine.username)
          TWINE_PASSWORD: $(twine.password)
