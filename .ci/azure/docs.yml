jobs:
  # Build docs only on scheduled jobs or on a relase
  - job: BuildDocs
    # condition: or(eq(variables['Build.Reason'], 'Schedule'), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    pool:
      vmImage: ubuntu-latest
    variables:
      python.version: '3.8'
    timeoutInMinutes: 240
    steps:
        # Checkout simpeg repo, including tags.
        # Disable shallow depth to get the SimPEG version.
        - checkout: self
          fetchDepth: 0
          fetchTags: true
          displayName: Checkout repository (including tags)

        - script: |
            wget -O Mambaforge.sh  "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
            bash Mambaforge.sh -b -p "${HOME}/conda"
          displayName: Install mamba

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            source "${HOME}/conda/etc/profile.d/mamba.sh"
            cp environment_test.yml environment_test_with_pyversion.yml
            echo "  - python="$(python.version) >> environment_test_with_pyversion.yml
            mamba env create -f environment_test_with_pyversion.yml
            rm environment_test_with_pyversion.yml
            conda activate simpeg-test
            pip install pytest-azurepipelines
            echo "\nList installed packages"
            conda list
          displayName: Create Anaconda testing environment

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            pip install -e .
          displayName: Build package

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            python -c "import simpeg; print(simpeg.__version__)"
          displayName: Check SimPEG version

        - script: |
            source "${HOME}/conda/etc/profile.d/conda.sh"
            conda activate simpeg-test
            KMP_WARNINGS=0 make -C docs html
          displayName: Building documentation

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(Build.SourcesDirectory)/docs/_build/html
            artifactName: built-docs
          displayName: 'Upload docs as artifact'

  - job: DeployRelease
    dependsOn: BuildDocs
    # condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    pool:
      vmImage: ubuntu-latest
    timeoutInMinutes: 240
    steps:
        # Checkout simpeg repo, including tags.
        # Disable shallow depth to get the SimPEG version.
        - checkout: self
          fetchDepth: 0
          fetchTags: true
          displayName: Checkout repository (including tags)

        - bash: |
            git config --global user.name ${GH_NAME}
            git config --global user.email ${GH_EMAIL}
            git config --list | grep user.
          displayName: 'Configure git'
          env:
            GH_NAME: $(gh.name)
            GH_EMAIL: $(gh.email)

        - bash: |
            mkdir -p docs/_build/html
          displayName: 'Create directory for built docs'

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: built-docs
            targetPath: docs/_build/html
          displayName: 'Download docs artifact'

        - bash: |
            ls -la
            ls -la docs
            ls -la docs/_build
            ls -la docs/_build/html
